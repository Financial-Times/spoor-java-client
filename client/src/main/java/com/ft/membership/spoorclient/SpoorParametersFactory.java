package com.ft.membership.spoorclient;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import java.util.Arrays;import java.util.Optional;import java.util.UUID;import java.util.function.Function;import java.util.regex.Matcher;import java.util.regex.Pattern;public class SpoorParametersFactory {    String apiKey;    String version = this.getClass().getPackage().getImplementationVersion();    String appRootUrl;    Function<HttpServletRequest, String> productFactory;    public SpoorParameters fromRequest(HttpServletRequest request, Optional<String> rootId) {        SpoorSystem trackingSystem = new SpoorSystem(apiKey, version, "spoor-java-client");        SpoorDevice trackingDevice = new SpoorDevice(                getCookieValue(request, "FTSession"),                getCookieValue(request, "spoor-id"),                getHeader(request, "User-Agent")        );        SpoorContext trackingContext = new SpoorContext(                UUID.randomUUID().toString(),                rootId.orElse(UUID.randomUUID().toString()),                productFactory.apply(request),                replaceUriRoot(getFullURL(request))        );        return new SpoorParameters(trackingSystem, trackingContext, trackingDevice, "page", "view");    }    private Pattern uriReplaceRegexp = Pattern.compile("https?://.*?(/.*)");    private String replaceUriRoot(String requestURI) {        Matcher matcher = uriReplaceRegexp.matcher(requestURI);        if(!matcher.matches()) {            throw new RuntimeException("Failed to replace root of uri:" + requestURI);        }        return appRootUrl + matcher.group(1);    }    private Optional<String> getCookieValue(HttpServletRequest request, String cookieKey) {        Cookie[] cookies = request.getCookies();        if(cookies == null) {            return Optional.empty();        } else {            return Arrays.stream(cookies)                    .filter((cookie) -> cookie.getName().equals(cookieKey))                    .map(Cookie::getValue)                    .findFirst();        }    }    private Optional<String> getHeader(HttpServletRequest request, String headerName) {        return Optional.ofNullable(request.getHeader(headerName));    }    public String getFullURL(HttpServletRequest request) {        StringBuffer requestURL = request.getRequestURL();        String queryString = request.getQueryString();        if (queryString == null) {            return requestURL.toString();        } else {            return requestURL.append('?').append(queryString).toString();        }    }    public SpoorParametersFactory(String apiKey, String appRootUrl, Function<HttpServletRequest, String> productFactory) {        this.apiKey = apiKey;        this.appRootUrl = appRootUrl;        this.productFactory = productFactory;    }    public SpoorParametersFactory(String apiKey, String appRootUrl, String product) {        this.apiKey = apiKey;        this.appRootUrl = appRootUrl;        this.productFactory = (request) -> product;    }}