package com.ft.membership.spoorclient;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import java.util.Arrays;import java.util.Optional;import java.util.UUID;import java.util.function.Function;import java.util.regex.Matcher;import java.util.regex.Pattern;public class SpoorParametersFactory {    String apiKey;    String version = this.getClass().getPackage().getImplementationVersion();    String appRootUrl;    Function<HttpServletRequest, String> productFactory;    protected void buildSpoorContextFromRequest(SpoorContext spoorContext, HttpServletRequest request, Optional<String> rootId) {        spoorContext.setId(UUID.randomUUID().toString());        spoorContext.setRootId(rootId.orElse(UUID.randomUUID().toString()));        spoorContext.setProduct(productFactory.apply(request));        spoorContext.setUrl(replaceUriRoot(getFullURL(request)));    }    protected void buildSpoorDeviceFromRequest(SpoorDevice device, HttpServletRequest request) {        device.setSpoorSession(getCookieValue(request, "FTSession"));        device.setSpoorId(getCookieValue(request, "spoor-id"));        device.setUserAgent(getHeader(request, "User-Agent"));    }    protected void buildSpoorSystem(SpoorSystem system) {        system.setApiKey(apiKey);        system.setVersion(version);        system.setApiKey("spoor-java-client");    }    private Pattern uriReplaceRegexp = Pattern.compile("https?://.*?(/.*)");    private String replaceUriRoot(String requestURI) {        Matcher matcher = uriReplaceRegexp.matcher(requestURI);        if(!matcher.matches()) {            throw new RuntimeException("Failed to replace root of uri:" + requestURI);        }        return appRootUrl + matcher.group(1);    }    private Optional<String> getCookieValue(HttpServletRequest request, String cookieKey) {        Cookie[] cookies = request.getCookies();        if(cookies == null) {            return Optional.empty();        } else {            return Arrays.stream(cookies)                    .filter((cookie) -> cookie.getName().equals(cookieKey))                    .map(Cookie::getValue)                    .findFirst();        }    }    private Optional<String> getHeader(HttpServletRequest request, String headerName) {        return Optional.ofNullable(request.getHeader(headerName));    }    public String getFullURL(HttpServletRequest request) {        StringBuffer requestURL = request.getRequestURL();        String queryString = request.getQueryString();        if (queryString == null) {            return requestURL.toString();        } else {            return requestURL.append('?').append(queryString).toString();        }    }    public <SpoorSystemType extends SpoorSystem, SpoorContextType extends SpoorContext, SpoorDeviceType extends SpoorDevice>    void fromRequest(SpoorParameters<SpoorSystemType, SpoorContextType, SpoorDeviceType> defaultSpoorParameters, HttpServletRequest request, Optional<String> rootId) {        buildSpoorSystem(defaultSpoorParameters.getSystem());        buildSpoorContextFromRequest(defaultSpoorParameters.getContext(), request, rootId);        buildSpoorDeviceFromRequest(defaultSpoorParameters.getDevice(), request);        defaultSpoorParameters.setAction("view");        defaultSpoorParameters.setCategory("page");    }    public SpoorParametersFactory(String apiKey, String appRootUrl, Function<HttpServletRequest, String> productFactory) {        this.apiKey = apiKey;        this.appRootUrl = appRootUrl;        this.productFactory = productFactory;    }    public SpoorParametersFactory(String apiKey, String appRootUrl, String product) {        this.apiKey = apiKey;        this.appRootUrl = appRootUrl;        this.productFactory = (request) -> product;    }}